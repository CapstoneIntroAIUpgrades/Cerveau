// Generated by Creer at 04:24PM on March 02, 2016 UTC, git hash: '0cc14891fb0c7c6bec65a23a8e2497e80f8827c1'

var Class = require(__basedir + "/utilities/class");
var serializer = require(__basedir + "/gameplay/serializer");
var log = require(__basedir + "/gameplay/log");
var TwoPlayerGame = require(__basedir + "/gameplay/shared/twoPlayerGame");
var TurnBasedGame = require(__basedir + "/gameplay/shared/turnBasedGame");

//<<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

// any additional requires you want can be required here safely between Creer re-runs

//<<-- /Creer-Merge: requires -->>

// @class Game: There's an infestation of enemy spiders challenging your queen broodmother spider! Protect her and attack the other broodmother in this turn based, node based, game.
var Game = Class(TwoPlayerGame, TurnBasedGame, {
    /**
     * Initializes Games.
     *
     * @param {Object} data - a simple mapping passsed in to the constructor with whatever you sent with it. GameSettings are in here by key/value as well.
     */
    init: function(data) {
        TurnBasedGame.init.apply(this, arguments);
        TwoPlayerGame.init.apply(this, arguments);

        /**
         * Every Nest in the game.
         *
         * @type {list.<Nest>}
         */
        this._addProperty("nests", serializer.defaultArray(data.nests));

        /**
         * Every Web in the game.
         *
         * @type {list.<Web>}
         */
        this._addProperty("webs", serializer.defaultArray(data.webs));


        //<<-- Creer-Merge: init -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        this.maxTurns = 300;

        // used for map generation
        this._mapSize = 5000;
        this._maxNests = 60; // per side, as are the folling
        this._minNests = 10;
        this._maxWebs = 30;
        this._minWebs = 0;

        //<<-- /Creer-Merge: init -->>
    },

    name: "Spiders",
    webserverID: "MegaMinerAI-##-Spiders",


    /**
     * This is called when the game begins, once players are connected and ready to play, and game objects have been initialized. Anything in init() may not have the appropriate game objects created yet..
     */
    begin: function() {
        TurnBasedGame.begin.apply(this, arguments);
        TwoPlayerGame.begin.apply(this, arguments);

        //<<-- Creer-Merge: begin -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        // genreate Nests on the left
        var numNests = Math.randomInt(this._maxNests, this._minNests);
        for(var i = 0; i < numNests; i++) {
            this.nests.push(this.create("Nest", {
                x: Math.randomInt(this._mapSize/2),
                y: Math.randomInt(this._mapSize),
            }));
        }

        // geneate Webs on the left
        var numWebs = Math.randomInt(this._maxWebs, this._minWebs);
        for(var i = 0; i < numWebs; i++) {
            var nestA = this.nests.randomElement();
            var nestB = nestA;
            while(nestB !== nestA) {
                nestB = this.nests.randomElement();
            }

            this.webs.push(this.create("Web", {
                nestA: nestA,
                nestB: nestB,
            }));
        }

        // create the BroodMother
        this.players[0].broodMother = this.create("BroodMother", {
            nest: this.nests.randomElement(),
        });

        // now mirror it

        // mirror the Nests
        var mirroredNests = {};
        for(var i = 0; i < numNests; i++) {
            var mirroring = this.nests[i];
            var mirrored = this.create("Nest", {
                x: this._mapSize - mirroring.x,
                y: mirroring.y,
            });

            mirroredNests[mirroring.id] = mirrored;
            this.nests.push(mirrored);
        }

        // mirror the Webs
        for(var i = 0; i < numWebs; i++) {
            var mirroring = this.webs[i];

            this.webs.push(this.create("Web", {
                nestA: mirroredNests[mirroring.nestA.id],
                nestB: mirroredNests[mirroring.nestB.id],
            }));
        }

        // mirror the BroodMother
        this.players[1].broodMother = this.create("BroodMother", {
            nest: mirroredNests[this.players[0].broodMother.nest.id],
        });

        //<<-- /Creer-Merge: begin -->>
    },

    /**
     * This is called when the game has started, after all the begin()s. This is a good spot to send orders.
     */
    _started: function() {
        TurnBasedGame._started.apply(this, arguments);
        TwoPlayerGame._started.apply(this, arguments);

        //<<-- Creer-Merge: _started -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        // any logic for _started can be put here
        //<<-- /Creer-Merge: _started -->>
    },


    //<<-- Creer-Merge: added-functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

    // You can add additional functions here. These functions will not be directly callable by client AIs

    //<<-- /Creer-Merge: added-functions -->>

});

module.exports = Game;
