// Generated by Creer at 04:24PM on March 02, 2016 UTC, git hash: '0cc14891fb0c7c6bec65a23a8e2497e80f8827c1'

var Class = require(__basedir + "/utilities/class");
var serializer = require(__basedir + "/gameplay/serializer");
var log = require(__basedir + "/gameplay/log");
var Spiderling = require("./spiderling");

//<<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

// any additional requires you want can be required here safely between Creer re-runs

//<<-- /Creer-Merge: requires -->>

// @class Weaver: A Spiderling that can alter existing Webs by weaving to add or remove silk from the Webs, thus altering its strength.
var Weaver = Class(Spiderling, {
    /**
     * Initializes Weavers.
     *
     * @param {Object} data - a simple mapping passsed in to the constructor with whatever you sent with it. GameSettings are in here by key/value as well.
     */
    init: function(data) {
        Spiderling.init.apply(this, arguments);

        /**
         * The Web that this Weaver is strengthening. Null if not strengthening.
         *
         * @type {Web}
         */
        this._addProperty("strengtheningWeb", serializer.defaultGameObject(data.strengtheningWeb));

        /**
         * The Web that this Weaver is weakening. Null if not weakening.
         *
         * @type {Web}
         */
        this._addProperty("weakeningWeb", serializer.defaultGameObject(data.weakeningWeb));


        //<<-- Creer-Merge: init -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        // put any initialization logic here. the base variables should be set from 'data' above
        // NOTE: no players are connected (nor created) at this point. For that logic use 'begin()'

        //<<-- /Creer-Merge: init -->>
    },

    gameObjectName: "Weaver",


    /**
     * Weaves more silk into an existing Web to strengthen it.
     *
     * @param {Player} player - the player that called this.
     * @param {Web} web - The web you want to strengthen. Must be connected to the Nest this Weaver is currently on.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {boolean} True if the strengthen was successfully started, false otherwise.
     */
    strengthen: function(player, web, asyncReturn) {
        // <<-- Creer-Merge: strengthen -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        if(this.owner !== player){
            return this.game.logicError(false, "{player} does not own {this}.".format({
                this: this,
                player: player,
            }));
        }
        if(!web){
            return this.game.logicError(false, "You need to pass a web.");
        }
        if(this.nest !== nestA && this.nest !== nestB){
            return this.game.logicError(false, "{this} can only strengthen webs connected to {this.nest}.".format({
                this: this,
            }));
        }
        if(this.isDead){
            return.this.game.logicError(false, "{player} cannot control a dead {this}.".format({
                this: this,
                player: player,
            }));
        }
        web.strengthen();


        // Developer: Put your game logic for the Weaver's strengthen function here
        return true;

        // <<-- /Creer-Merge: strengthen -->>
    },

    /**
     * Weaves more silk into an existing Web to strengthen it.
     *
     * @param {Player} player - the player that called this.
     * @param {Web} web - The web you want to weaken. Must be connected to the Nest this Weaver is currently on.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {boolean} True if the weaken was successfully started, false otherwise.
     */
    weaken: function(player, web, asyncReturn) {
        // <<-- Creer-Merge: weaken -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        if(this.isDead){
            return this.game.logicError(false, "{player} cannot control a dead {this}.".format({
                this: this,
                player: player,
            }));
        }
        if(!web){
            return this.game.logicError(false, "You need to pass a web.");
        }
        if(this.owner !== player){
            return this.game.logicError(false, "{player} does not own {this}.".format({
                this: this,
                player: player,
            }));
        }
        if(this.nest !== nestA && this.nest !== nestB){
            return this.game.logicError(false, "{this} can only weaken webs connect to {this.nest}.".format({
                this: this,
            }));
        }
        web.weaken();
        
        // Developer: Put your game logic for the Weaver's weaken function here
        return true;

        // <<-- /Creer-Merge: weaken -->>
    },

    //<<-- Creer-Merge: added-functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

    // You can add additional functions here. These functions will not be directly callable by client AIs

    //<<-- /Creer-Merge: added-functions -->>

});

module.exports = Weaver;
