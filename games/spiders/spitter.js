// Generated by Creer at 04:24PM on March 02, 2016 UTC, git hash: '0cc14891fb0c7c6bec65a23a8e2497e80f8827c1'

var Class = require(__basedir + "/utilities/class");
var serializer = require(__basedir + "/gameplay/serializer");
var log = require(__basedir + "/gameplay/log");
var Spiderling = require("./spiderling");

//<<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

// any additional requires you want can be required here safely between Creer re-runs

//<<-- /Creer-Merge: requires -->>

// @class Spitter: A Spiderling that creates and spits new Webs from the Nest it is on to another Nest, connecting them.
var Spitter = Class(Spiderling, {
    /**
     * Initializes Spitters.
     *
     * @param {Object} data - a simple mapping passsed in to the constructor with whatever you sent with it. GameSettings are in here by key/value as well.
     */
    init: function(data) {
        Spiderling.init.apply(this, arguments);

        /**
         * The Nest that this Spitter is creating a Web to spit at, thus connecting them. Null if not spitting.
         *
         * @type {Nest}
         */
        this._addProperty("spittingWebToNest", serializer.defaultGameObject(data.spittingWebToNest));


        //<<-- Creer-Merge: init -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        // put any initialization logic here. the base variables should be set from 'data' above
        // NOTE: no players are connected (nor created) at this point. For that logic use 'begin()'

        //<<-- /Creer-Merge: init -->>
    },

    gameObjectName: "Spitter",


    /**
     * Creates and spits a new Web from the Nest the Spitter is on to another Nest, connecting them.
     *
     * @param {Player} player - the player that called this.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {boolean} True if the spit was successful, false otherwise.
     */
    spit: function(player, asyncReturn) {
        // <<-- Creer-Merge: spit -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        if(this.isDead){
            return this.game.logicError(false, "{player} cannot control a dead {this}".format({
                player: player,
                this: this,
            }));
        }
        if(this.owner !== player){
            return this.game.logicError(false, "{player} does not own {this}".format({
                player: player,
                this: this,
            }));
        }
        if(this.nest === null){
            return this.game.logicError(false, "{this} needs to be a nest to spit from.".format({
                this: this,
            }));
        }
        if(!nest){
            return this.game.logicError(false, "No nest was passed to spit to.");
        }
        // Developer: Put your game logic for the Spitter's spit function here
        this.game.create("Web", {
            nestA: this.nest,
            nestB: nest,
        })
        return true;

        // <<-- /Creer-Merge: spit -->>
    },

    //<<-- Creer-Merge: added-functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

    // You can add additional functions here. These functions will not be directly callable by client AIs

    //<<-- /Creer-Merge: added-functions -->>

});

module.exports = Spitter;
