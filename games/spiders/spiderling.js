// Generated by Creer at 04:24PM on March 02, 2016 UTC, git hash: '0cc14891fb0c7c6bec65a23a8e2497e80f8827c1'

var Class = require(__basedir + "/utilities/class");
var serializer = require(__basedir + "/gameplay/serializer");
var log = require(__basedir + "/gameplay/log");
var Spider = require("./spider");

//<<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

// any additional requires you want can be required here safely between Creer re-runs

//<<-- /Creer-Merge: requires -->>

// @class Spiderling: A Spider spawned by the BroodMother.
var Spiderling = Class(Spider, {
    /**
     * Initializes Spiderlings.
     *
     * @param {Object} data - a simple mapping passsed in to the constructor with whatever you sent with it. GameSettings are in here by key/value as well.
     */
    init: function(data) {
        Spider.init.apply(this, arguments);

        /**
         * When empty string this Spiderling is not busy, and can act. Otherwise a string representing what it is busy with, e.g. 'Moving', 'Attacking'.
         *
         * @type {boolean}
         */
        this._addProperty("busy", serializer.defaultBoolean(data.busy));

        /**
         * How much damage this Spiderling does to the BroodMother.
         *
         * @type {number}
         */
        this._addProperty("damage", serializer.defaultInteger(data.damage));

        /**
         * The Web this Spiderling is using to move. Null if it is not moving.
         *
         * @type {Web}
         */
        this._addProperty("movingOnWeb", serializer.defaultGameObject(data.movingOnWeb));

        /**
         * The Nest this Spiderling is moving to. Null if it is not moving.
         *
         * @type {Nest}
         */
        this._addProperty("movingToNest", serializer.defaultGameObject(data.movingToNest));

        /**
         * How much distance this Spiderling covers per turn when moving across Webs.
         *
         * @type {number}
         */
        this._addProperty("speed", serializer.defaultNumber(data.speed));

        /**
         * The number of turns remaining for this Spiderling's current task.
         *
         * @type {number}
         */
        this._addProperty("turnsRemaining", serializer.defaultInteger(data.turnsRemaining));

        /**
         * How heavy this spider is. Webs it moves across must have enough strength to support it in addition to existing Spiderlings.
         *
         * @type {number}
         */
        this._addProperty("weight", serializer.defaultInteger(data.weight));


        //<<-- Creer-Merge: init -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        // put any initialization logic here. the base variables should be set from 'data' above
        // NOTE: no players are connected (nor created) at this point. For that logic use 'begin()'

        //<<-- /Creer-Merge: init -->>
    },

    gameObjectName: "Spiderling",


    /**
     * Attacks another Spiderling
     *
     * @param {Player} player - the player that called this.
     * @param {Spiderling} spiderling - The Spiderling to attack.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {boolean} True if the attack was successful, false otherwise.
     */
    attack: function(player, spiderling, asyncReturn) {
        // <<-- Creer-Merge: attack -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        // Developer: Put your game logic for the Spiderling's attack function here
        return false;

        // <<-- /Creer-Merge: attack -->>
    },

    /**
     * Starts moving the Spiderling across a Web to another Nest.
     *
     * @param {Player} player - the player that called this.
     * @param {Web} web - The Web you want to move across to the other Nest.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {boolean} True if the move was successful, false otherwise.
     */
    move: function(player, web, asyncReturn) {
        // <<-- Creer-Merge: move -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        var error = Spiderling._validate.call(this, player, false);
        if(error) {
            return error;
        }

        if(!web) {
            return this.game.logicError(false, "{web} is not a Web for {this} to move on.".format({
                this: this,
                web: web,
            }));
        }

        if(!web.isConnectedTo(this.nest)) {
            return this.game.logicError(false, "{web} is not connected to {this.nest} for {this} to move on.".format({
                this: this,
                web: web,
            }));
        }

        // if we got here the move is valid

        this.busy = "Moving";
        this.turnsRemaining = Math.ceil(web.length / this.speed);

        this.movingOnWeb = web;
        this.movingToNest = web.getOtherNest(this.nest);

        this.nest.spiders.removeElement(this);
        this.nest = null;

        web.spiderlings.push(this);
        web.recalculateLoad();

        return true;

        // <<-- /Creer-Merge: move -->>
    },

    //<<-- Creer-Merge: added-functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

    /**
     * Checks if this spiderling is valid to do something
     *
     * @param {Player} player - the player that is trying to command this Spiderling
     * @param {*} invalidReturnValue - what to return if invalid (in the GameLogicError)
     * @retuns {GameLogicError} a game logic error if there is something wrong, undefined otherwise
     */
    _validate: function(player, invalidReturnValue) {
        var reason;
        if(this.owner !== player) {
            reason = "{player} does not own {this}.";
        }
        else if(this.isDead) {
            reason = "{this} is dead and cannot do anything.";
        }
        else if(this.busy) {
            reason = "{this} is already busy with '{this.busy}'.";
        }

        if(reason) {
            return this.game.logicError(invalidReturnValue, reason.format({
                this: this,
                player: player,
            }));
        }
    },

    //<<-- /Creer-Merge: added-functions -->>

});

module.exports = Spiderling;
