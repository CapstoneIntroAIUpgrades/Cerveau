// Generated by Creer at 04:13PM on December 01, 2015 UTC, git hash: '1b69e788060071d644dd7b8745dca107577844e1'

var Class = require(__basedir + "/utilities/class");
var serializer = require(__basedir + "/gameplay/serializer");
var log = require(__basedir + "/gameplay/log");
var GameObject = require("./gameObject");

//<<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

// any additional requires you want can be required here safely between Creer re-runs

//<<-- /Creer-Merge: requires -->>

// @class Player: A player in this game. Every AI controls one player.
var Player = Class(GameObject, {
    /**
     * Initializes Players.
     *
     * @param {Object} data - a simple mapping passsed in to the constructor with whatever you sent with it. GameSettings are in here by key/value as well.
     */
    init: function(data) {
        GameObject.init.apply(this, arguments);

        /**
         * What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes.
         *
         * @type {string}
         */
        this._addProperty("clientType", serializer.defaultString(data.clientType));

        /**
         * The color (side) of this player. Either 'White' or 'Black', with the 'White' player having the first move.
         *
         * @type {String}
         */
        this._addProperty("color", serializer.defaultGameObject(data.color));

        /**
         * The direction your checkers must go along the file (y) axis until they reach the other side.
         *
         * @type {number}
         */
        this._addProperty("fileDirection", serializer.defaultInteger(data.fileDirection));

        /**
         * true if this player is currently in check, and must move out of check.
         *
         * @type {boolean}
         */
        this._addProperty("inCheck", serializer.defaultBoolean(data.inCheck));

        /**
         * if the player lost the game or not
         *
         * @type {boolean}
         */
        this._addProperty("lost", serializer.defaultBoolean(data.lost));

        /**
         * If the Player has made thier move for the turn. true means they can no longer move a piece this turn.
         *
         * @type {boolean}
         */
        this._addProperty("madeMove", serializer.defaultBoolean(data.madeMove));

        /**
         * The name of the player
         *
         * @type {string}
         */
        this._addProperty("name", serializer.defaultString(data.name));

        /**
         * this player's opponent in the game.
         *
         * @type {Player}
         */
        this._addProperty("otherPlayer", serializer.defaultGameObject(data.otherPlayer));

        /**
         * All the unpcaptured chess pieces owned by this player.
         *
         * @type {list.<Piece>}
         */
        this._addProperty("pieces", serializer.defaultArray(data.pieces));

        /**
         * the reason why the player lost the game
         *
         * @type {string}
         */
        this._addProperty("reasonLost", serializer.defaultString(data.reasonLost));

        /**
         * the reason why the player won the game
         *
         * @type {string}
         */
        this._addProperty("reasonWon", serializer.defaultString(data.reasonWon));

        /**
         * The amount of time (in ns) remaining for this AI to send commands.
         *
         * @type {number}
         */
        this._addProperty("timeRemaining", serializer.defaultNumber(data.timeRemaining));

        /**
         * if the player won the game or not
         *
         * @type {boolean}
         */
        this._addProperty("won", serializer.defaultBoolean(data.won));


        //<<-- Creer-Merge: init -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        // put any initialization logic here. the base variables should be set from 'data' above
        // NOTE: no players are connected (nor created) at this point. For that logic use 'begin()'

        //<<-- /Creer-Merge: init -->>
    },

    gameObjectName: "Player",


    //<<-- Creer-Merge: added-functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

    toString: function() {
        return "Player {color} '{name}' #{id}".format(this);
    },

    getMoves: function(player, asyncReturn) {
        return this.game.moves;
    },

    //<<-- /Creer-Merge: added-functions -->>

});

module.exports = Player;
