// Generated by Creer at 10:54PM on October 16, 2015 UTC, git hash: '98604e3773d1933864742cb78acbf6ea0b4ecd7b'

var Class = require(__basedir + "/utilities/class");
var serializer = require(__basedir + "/gameplay/serializer");
var log = require(__basedir + "/gameplay/log");
var Building = require("./building");

//<<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

// any additional requires you want can be required here safely between cree runs
//<<-- /Creer-Merge: requires -->>

// @class Warehouse: A typical abandoned warehouse... that anarchists hang out in and can be bribed to burn down Buildings.
var Warehouse = Class(Building, {
    /**
     * Initializes Warehouses.
     *
     * @param {Object} a simple mapping passsed in to the constructor with whatever you sent with it.
     */
    init: function(data) {
        Building.init.apply(this, arguments);

        /**
         * How exposed the anarchists in this warehouse are to PoliceStations. Raises when bribed to ignite buildings, and drops each turn if not bribed.
         *
         * @type {number}
         */
        this._addProperty("exposure", serializer.defaultInteger(data.exposure));

        /**
         * The amount of fire added to buildings when bribed to ignite a building. Headquarters add more fire than normal Warehouses.
         *
         * @type {number}
         */
        this._addProperty("fireAdded", serializer.defaultInteger(data.fireAdded));


        //<<-- Creer-Merge: init -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        if(this.owner.headquarters === this) {
            this.fireAdded = this.game.maxFire;
        }
        else {
            this.fireAdded = Math.floor(this.game.maxFire/2);
        }

        //<<-- /Creer-Merge: init -->>
    },

    gameObjectName: "Warehouse",


    /**
     * Bribes the Warehouse to light a Building on fire. This adds this building's fireAdded to their fire, and then this building's exposure is increased based on the Manhatten distance between the two buildings.
     *
     * @param {Player} player - the player that called this.
     * @param {Building} building - The Building you want to light on fire.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {number} The exposure added to this Building's exposure. -1 is returned if there was an error.
     */
    ignite: function(player, building, asyncReturn) {
        // <<-- Creer-Merge: ignite -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        var logicError = this._checkIfBribeIsValid(player, -1);
        if(logicError) {
            return logicError;
        }

        if(!building) {
            return this.game.logicError(-1, "Warehouse has no targeted building to ignite.");
        }

        building.fire = Math.max(building.fire + this.fireAdded, this.game.maxFire);
        var exposure = Math.manhattanDistance(this, building);
        this.exposure += exposure // Do we want a cap on this?

        this.bribed = true;
        player.bribesRemaining--;

        return exposure;

        // <<-- /Creer-Merge: ignite -->>
    },

    //<<-- Creer-Merge: added-functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

    /**
     * @override
     */
    makeHeadquarters: function(/* ... */) {
        this.fireAdded = this.game.headquartersFireAdded;
        return Building.makeHeadquarters.apply(this, arguments);
    }

    //<<-- /Creer-Merge: added-functions -->>

});

module.exports = Warehouse;
