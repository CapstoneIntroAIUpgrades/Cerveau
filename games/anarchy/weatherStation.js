// Generated by Creer at 10:54PM on October 16, 2015 UTC, git hash: '98604e3773d1933864742cb78acbf6ea0b4ecd7b'

var Class = require(__basedir + "/utilities/class");
var serializer = require(__basedir + "/gameplay/serializer");
var log = require(__basedir + "/gameplay/log");
var Building = require("./building");

//<<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

// any additional requires you want can be required here safely between cree runs
//<<-- /Creer-Merge: requires -->>

// @class WeatherStation: Can be bribed to change the next Forecast in some way.
var WeatherStation = Class(Building, {
    /**
     * Initializes WeatherStations.
     *
     * @param {Object} a simple mapping passsed in to the constructor with whatever you sent with it.
     */
    init: function(data) {
        Building.init.apply(this, arguments);


        //<<-- Creer-Merge: init -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        // put any initialization logic here. the base variables should be set from 'data' above
        // NOTE: no players are connected (nor created) at this point. For that logic use 'begin()'

        //<<-- /Creer-Merge: init -->>
    },

    gameObjectName: "WeatherStation",


    /**
     * Bribe the weathermen to intensity the next Forecast by 1 or -1
     *
     * @param {Player} player - the player that called this.
     * @param {boolean} negative - By default the intensity will be increased by 1, setting this to true decreases the intensity by 1.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {boolean} true if the intensity was changed, false otherwise
     */
    intensify: function(player, negative, asyncReturn) {
        // <<-- Creer-Merge: intensify -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        //checks that the player is using one of their own weather stations
        if(this.owner !== player) {
            return game.logicError(false, "tried to use an enemy's weather station");
        }
        //checks that the weather station is not dead
        if(this.health <= 0) {
            return game.logicError(false, "tried to bribe a dead weather station");
        }
        //checks if the player has any remaining bribes
        if(player.bribesRemaining <= 0) {
            return game.logicError(false, "player has no remaining bribes");
        }
        //checks if the weather station has already been bribed this turn
        if(this.bribed) {
            return game.logicError(false, "weather station is has already been bribed this turn")
        }
        //checks if the intensity is already at max if trying to increase
        if(!negative && game.nextForecast.intensity >= 20) { //TODO: read max intensity from config
            return game.logicError(false, "next forecast's intensitysity cannot be increased further");
        }
        //checks if the intensity is at minimum if trying to decrease
        if(negative && game.nextForecast.intensity <= 0) { //TODO: read minimum intensity from config
            return game.logicError(false, "next forecast's intensity cannot be negative");
        }
        
        if(!negative) {
            game.nextForecast.intensity++;
        }
        else {
            game.nextForeCast.intesity--;
        }
        this.bribed = true;
        player.bribesRemaining--;
        return true;

        // <<-- /Creer-Merge: intensify -->>
    },

    /**
     * Bribe the weathermen to change the direction of the next Forecast by rotating it clockwise or counterclockwise.
     *
     * @param {Player} player - the player that called this.
     * @param {boolean} counterclockwise - By default the direction will be rotated clockwise. If you set this to true we will rotate the forecast counterclockwise instead.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {boolean} true if the rotation worked, false otherwise.
     */
    rotate: function(player, counterclockwise, asyncReturn) {
        // <<-- Creer-Merge: rotate -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

        var game = this.game;

        // check if the weatherstation is alive
        if(this.health <= 0) {
            return game.logicError(false, "tried to bribe a burned down WeatherStation");
        }

        // check if the player owns the building
        if(this.owner !== player) {
            return game.logicError(false, "tried to use an enemy's WeatherStation.rotate");
        }

        // check if the player has enough bribes remaining
        if(this.owner.bribesRemaining <= 0) {

            return game.logicError(false, "tried to bribe with no bribesRemaining");
        }

        // check if the building has already been bribed
        if(this.bribed) {
            return game.logicError(false, "this building has already been bribed");
        }

        this.bribed = true;
        this.owner.bribesRemaining--;
        if(game.nextForecast.direction === "north") {
            if(counterclockwise) {
                game.nextForecast.direction = "west";
            }
            else {
                game.nextForecast.direction = "east";
            }
        }
        else if(game.nextForecast.direction === "east") {
            if(counterclockwise) {
                game.nextForecast.direction = "north";
            }
            else {
                game.nextForecast.direction = "south";
            }
        }
        else if(game.nextForecast.direction === "south") {
            if(counterclockwise) {
                game.nextForecast.direction = "east";
            }
            else {
                game.nextForecast.direction = "west";
            }
        }
        else if(game.nextForecast.direction === "west") {
            if(counterclockwise) {
                game.nextForecast.direction = "south";
            }
            else {
                game.nextForecast.direction = "north";
            }
        }
        return true;

        // <<-- /Creer-Merge: rotate -->>
    },

    //<<-- Creer-Merge: added-functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.

    // You can add additional functions here. These functions will not be directly callable by client AIs

    //<<-- /Creer-Merge: added-functions -->>

});

module.exports = WeatherStation;
