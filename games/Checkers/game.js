// Generated by Creer at 02:43AM on May 03, 2015 UTC, git hash: '2acbba9c4b682c4de68840c1ca9bec631e9c635f'
// Note: this is the file you should modify. The logic generated by Creer should be mostly in ./generated/

var Class = require("../../utilities/class");
var GeneratedGame = require("./generated/generatedGame");

// @class Game: The simple version of American Checkers
var Game = Class(GeneratedGame, {
	init: function(data) {
		GeneratedGame.init.apply(this, arguments);

		// put any initialization logic here. the base variables should be set from 'data' in GeneratedGame's init function
		// NOTE: no players are connected at this point.

		this.boardWidth = 8;
		this.boardHeight = 8;
		this.maxTurns = 300;
	},

	/// this is called when the game begins, once players are connected and ready to play. Anything in init() will not have players to assign units to.
	begin: function() {
		GeneratedGame.begin.apply(this, arguments);
		this._initCheckerPieces();
	},

	_initPlayers: function() {
		GeneratedGame._initPlayers.apply(this, arguments);

		// we can assume there are only 2 players, no need to loop through them
		this.players[0].yDirection = 1;  // they are on top, and move down the board until kinged
		this.players[1].yDirection = -1; // they are on bottom, and move up the board until kinged
	},

	/// initializes the checker game objects for this game
	_initCheckerPieces: function() {
		for(var y = 0; y < this.boardHeight; y++) {
			for(var x = 0; x < this.boardWidth; x++) {
				if(this.isValidTile(x, y)) {
					var owner = undefined;

					if(y < 3) { // then it is player 0's checker
						owner = this.players[0];
					}
					else if(y > 4) { // then it is player 1's checker
						owner = this.players[1];
					} // else is the middle, which has no intial checker pieces

					if(owner) {
						var checker = this.newChecker({
							owner: owner,
							x: x,
							y: y,
							kinged: false,
						});

						this.checkers.push(checker);
						owner.checkers.push(checker);
					}
				}

			}
		}
	},

	isValidTile: function(x, y) {
		return (x + y)%2 == 1;
	},

	getCheckerAt: function(x, y) {
		for(var i = 0; i < this.checkers.length; i++) {
			var checker = this.checkers[i];

			if(checker.x == x && checker.y == y) {
				return checker;
			}
		}
	},



	//--- Turn Based Game mechanics ---\

	// inheritied from GeneratedGame (which inherited it from TurnBasedGame)
	nextTurn: function() {
		this.checkerMoved = null;
		this.checkerMovedJumped = false;

		return GeneratedGame.nextTurn.apply(this, arguments);
	},

	_maxTurnsReached: function() {
		GeneratedGame._maxTurnsReached.apply(this, arguments);

		var checkerValuesForPlayerID = {};
		for(var i = 0; i < this.checkers.length; i++) {
			var checker = this.checkers[i];
			checkerValuesForPlayerID[checker.owner.id] = checkerValuesForPlayerID[checker.owner.id] || 1;
			checkerValuesForPlayerID[checker.owner.id] += (checker.kinged ? 100 : 1);
		}

		// TODO: handle draw
		var winner;
		for(var i = 0; i < this.players.length; i++) {
			var player = this.players[i];
			winner = winner || player;

			if(checkerValuesForPlayerID[player.id] > checkerValuesForPlayerID[winner.id]) {
				winner = player;
			}
		}

		if(winner) {
			return this.declairWinner(winner, "Turn limit reached; has the most remaining checkers or kinged checkers");
		}
	},
});

module.exports = Game;
