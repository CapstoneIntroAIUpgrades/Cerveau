// Generated by Creer at 11:12PM on September 17, 2015 UTC, git hash: '3f0e08b46657dff30d7c082da7471381f8a1ab62'
// Note: this is the file you should modify. The logic generated by Creer should be mostly in ./generated/

var Class = require(__basedir + "/utilities/class");
var serializer = require(__basedir + "/gameplay/serializer");
var log = require(__basedir + "/gameplay/log");
var GameObject = require("./gameObject");

//<<-- Creer-Merge: requires -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
// any additional requires you want can be required here safely between cree runs
//<<-- /Creer-Merge: requires -->>

// @class Checker: A checker on the game board.
var Checker = Class(GameObject, {
    /**
     * Initializes Checkers.
     *
     * @param {Object} a simple mapping passsed in to the constructor with whatever you sent with it.
     */
    init: function(data) {
        GameObject.init.apply(this, arguments);

        /**
         * If the checker has been kinged and can move backwards.
         *
         * @type {boolean}
         */
        this._addProperty("kinged", serializer.defaultBoolean(data.kinged));

        /**
         * The player that controls this Checker.
         *
         * @type {Player}
         */
        this._addProperty("owner", serializer.defaultGameObject(data.owner));

        /**
         * The x coordinate of the checker.
         *
         * @type {number}
         */
        this._addProperty("x", serializer.defaultInteger(data.x));

        /**
         * The y coordinate of the checker.
         *
         * @type {number}
         */
        this._addProperty("y", serializer.defaultInteger(data.y));


        //<<-- Creer-Merge: init -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        // put any initialization logic here. the base variables should be set from 'data' in Generated${obj_key}'s init function
        // NOTE: no players are connected at this point.
        //<<-- /Creer-Merge: init -->>
    },

    gameObjectName: "Checker",


    /**
     * returns if the checker is owned by your player or not
     *
     * @param {Player} player - the player that called this.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {boolean} true if it is yours, false if it is not yours
     */
    isMine: function(player, asyncReturn) {
        // <<-- Creer-Merge: isMine -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        return (player === this.owner);
        // <<-- /Creer-Merge: isMine -->>
    },

    /**
     * Moves the checker from its current location to the given (x, y).
     *
     * @param {Player} player - the player that called this.
     * @param {number} x - The x coordinate to move to.
     * @param {number} y - The y coordinate to move to.
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
     * @returns {Checker} Returns the same checker that moved if the move was successful. null otherwise.
     */
    move: function(player, x, y, asyncReturn) {
        // <<-- Creer-Merge: move -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        game = this.game;
        if(this.owner !== player) {
            game.throwInvalidGameLogic(player, "tried to move a checker they didn't own");
        }

        if(game.checkerMoved) {
            if(game.checkerMoved !== this) {
                game.throwInvalidGameLogic(player, "tried to move a diferent checker than the already moved one");
            }
            else if(!game.checkerMovedJumped) {
                game.throwInvalidGameLogic(player, "tried to move again after not jumping another checker.");
            }
        }

        if(game.getCheckerAt(x, y)) {
            game.throwInvalidGameLogic(player, "tried to move onto another checker");
        }

        var yOffset = 0;
        var yKing = 0;
        if(this.owner.id == 0) { // then first player, moves down
            yOffset = 1;
            yKing = game.boardHeight - 1;
        }
        else {
            yOffset = -1;
            yKing = 0;
        }

        var dy = y - this.y
        var dx = x - this.x

        var fromString = "(" + this.x + ", " + this.y + ") -> (" + x + ", " + y + ")"; 
        if(!this.kinged) { // then check if they are moving the right direction via dy when not kinged
            if((yOffset == 1 && dy < 1) || (yOffset == -1 && dy > -1)) {
                game.throwInvalidGameLogic(player, "moved in the wrong vertical direction " + fromString);
            }
        }

        var jumped;
        if(Math.abs(dx) === 2 && Math.abs(dy) === 2) { // then it's jumping something
            jumped = game.getCheckerAt(this.x + dx/2, this.y + dy/2);

            if(!jumped) {
                game.throwInvalidGameLogic(player, "tried to jump nothing " + fromString);
            }
            else if(jumped.owner.id === this.owner.id) {
                game.throwInvalidGameLogic(player, "tried to jump own checker " + fromString);
            }
        }
        else if(Math.abs(dx) === 1 && Math.abs(dy) === 1) { // then they are just moving 1 tile diagonally
            if(game.checkerMovedJumped) {
                game.throwInvalidGameLogic(player, "current checker must jump again, not move diagonally one tile " + fromString);
            }
            // else valid as normal move
        }
        else {
            game.throwInvalidGameLogic(player, "can't move there " + fromString);
        }

        // if we got here all the checks passed! the checker moves

        this.x = x;
        this.y = y;

        if(this.y === yKing) {
            this.kinged = true;
        }

        if(!game.checkerMoved) {
            game.checkerMoved = this;
        }

        if(jumped) {
            if(jumped.owner !== this.owner) {
                game.checkers.removeElement(jumped);
                jumped.owner.checkers.removeElement(jumped);

                // we need to check if the owner won because they just jumped all the other checkers
                var checkersOwnerWon = true;
                for(var i = 0; i < game.checkers.length; i++) {
                    if(this.owner !== game.checkers[i].owner) {
                        checkersOwnerWon = false;
                        break;
                    }
                }

                if(checkersOwnerWon) {
                    var otherPlayer = undefined;
                    for(var i = 0; i < game.players.length; i++) {
                        otherPlayer = game.players[i];
                        if(otherPlayer !== this.owner) {
                            break; // because we found the other player
                        }
                    }
                    game.declairLoser(otherPlayer, "No checkers remaining", {dontCheckForWinner: true});
                    game.declairWinner(this.owner, "All enemy checkers jumped");
                }
            }

            game.checkerMovedJumped = true;
        }

        return this;
        // <<-- /Creer-Merge: move -->>
    },

    //<<-- Creer-Merge: added-functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
    // You can add additional functions here. These functions will not be directly callable by client AIs
    //<<-- /Creer-Merge: added-functions -->>

});

module.exports = Checker;
