// Generated by Creer, git hash Error: git probably not installed
// Note: this is the file you should modify. The logic generated be Creer should be mostly in generated/
var extend = require("extend");
var Class = require("../../structures/class");
var GeneratedGame = require("./generated/generatedGame")

// @class Checkers.Game: The simple version of American Checkers
var Game = Class(GeneratedGame, {
	init: function() {
		GeneratedGame.init.apply(this, arguments);

		// any initialization you need to do can be done here. NOTE: no players are connected at this point.
		this.state.boardWidth = 8;
		this.state.boardHeight = 8;
	},


	begin: function() {
		GeneratedGame.begin.apply(this, arguments);

		// this is called when the game begins, once players are connected and ready to play. Anything in init() will not have to assign units to.
		this._initCheckerPieces();
	},

	_initCheckerPieces: function() {
		for(var y = 0; y < this.state.boardHeight; y++) {
			for(var x = 0; x < this.state.boardWidth; x++) {
				if(this.isValidTile(x, y)) {
					var owner = undefined;

					if(y < 3) { // then it is player 1's checker
						owner = this.state.players[0];
					}
					else if(y > 4) { // then it is player 2's checker
						owner = this.state.players[1];
					} // else is the middle, which has no intial checker pieces

					if(owner) {
						var checker = this.newChecker({
							owner: owner,
							x: x,
							y: y,
							kinged: false,
						});

						this.state.checkers.push(checker);
					}
				}

			}
		}
	},

	isValidTile: function(x, y) {
		return (x + y)%2 == 1;
	},

	getCheckerAt: function(x, y) {
		for(var i = 0; i < this.state.checkers.length; i++) {
			var checker = this.state.checkers[i];

			if(checker.x == x && checker.y == y) {
				return checker;
			}
		}
	},



	//--- Turn Based Game mechanics ---\

	// inheritied from GeneratedGame (which inherited it from TurnBasedGame)
	nextTurn: function() {
		this.state.checkerMoved = null;
		this.state.checkerMovedJumped = false;

		return GeneratedGame.nextTurn.apply(this, arguments);
	},

	_maxTurnsReached: function() {
		GeneratedGame._maxTurnsReached.apply(this, arguments);

		var checkerValuesForPlayerID = {};
		for(var i = 0; i < this.state.checkers.length; i++) {
			var checker = this.state.checkers[i];
			checkerValuesForPlayerID[checker.owner.id] = checkerValuesForPlayerID[checker.owner.id] || 1;
			checkerValuesForPlayerID[checker.owner.id] += (checker.kinged ? 100 : 1);
		}

		// TODO: handle draw
		var winner;
		for(var i = 0; i < this.state.players.length; i++) {
			var player = this.state.players[i];
			winner = winner || player;

			if(checkerValuesForPlayerID[player.id] > checkerValuesForPlayerID[winner.id]) {
				winner = player;
			}
		}

		if(winner) {
			return this.declairWinner(winner);
		}
	},
});

module.exports = Game;
