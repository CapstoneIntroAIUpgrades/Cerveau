// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// This basically sets up all the classes we need for TypeScript to know the
// base classes with minimal code for developers to be forced to fill out

// tslint:disable:max-classes-per-file - because we need to build a bunch of base class wrappers here

// base game classes
import {
    BaseAI, BaseGame, BaseGameManager, BaseGameObject,
    BaseGameObjectFactory, BaseGameSettingsManager, IBasePlayer, makeNamespace,
} from "~/core/game";

// mixins
import { ITiledPlayer, ITurnBasedPlayer, ITwoPlayerPlayer, mixTiled, mixTurnBased, mixTwoPlayer } from "~/core/game/mixins";

export interface IBaseSaloonPlayer extends IBasePlayer, ITwoPlayerPlayer, ITurnBasedPlayer, ITiledPlayer {}

const base0 = {
    AI: BaseAI,
    Game: BaseGame,
    GameManager: BaseGameManager,
    GameObject: BaseGameObject,
    GameSettings: BaseGameSettingsManager,
};

const base1 = mixTwoPlayer(base0);
const base2 = mixTurnBased(base1);
const base3 = mixTiled(base2);

const mixed = base3;

export class BaseSaloonAI extends mixed.AI {}
class BaseSaloonGame extends mixed.Game {}
class BaseSaloonGameManager extends mixed.GameManager {}
class BaseSaloonGameObject extends mixed.GameObject {}
class BaseSaloonGameSettings extends mixed.GameSettings {}

export const BaseClasses = {
    AI: BaseSaloonAI,
    Game: BaseSaloonGame,
    GameManager: BaseSaloonGameManager,
    GameObject: BaseSaloonGameObject,
    GameSettings: BaseSaloonGameSettings,
};

// now all the base classes are created, so we can start importing/exporting the classes that need them

export interface IBottleProperties {
    direction?: string;
    drunkDirection?: string;
    isDestroyed?: boolean;
    tile?: Tile;
}

export interface ICowboyProperties {
    canMove?: boolean;
    drunkDirection?: string;
    focus?: number;
    health?: number;
    isDead?: boolean;
    isDrunk?: boolean;
    job?: string;
    owner?: Player;
    tile?: Tile;
    tolerance?: number;
    turnsBusy?: number;
}

export interface IFurnishingProperties {
    health?: number;
    isDestroyed?: boolean;
    isPiano?: boolean;
    isPlaying?: boolean;
    tile?: Tile;
}

export interface IGameObjectProperties {
}

export interface IPlayerProperties {
    clientType?: string;
    cowboys?: Cowboy[];
    kills?: number;
    lost?: boolean;
    name?: string;
    opponent?: Player;
    reasonLost?: string;
    reasonWon?: string;
    rowdiness?: number;
    score?: number;
    siesta?: number;
    timeRemaining?: number;
    won?: boolean;
    youngGun?: YoungGun;
}

export interface ITileProperties {
    bottle?: Bottle;
    cowboy?: Cowboy;
    furnishing?: Furnishing;
    hasHazard?: boolean;
    isBalcony?: boolean;
    tileEast?: Tile;
    tileNorth?: Tile;
    tileSouth?: Tile;
    tileWest?: Tile;
    x?: number;
    y?: number;
    youngGun?: YoungGun;
}

export interface IYoungGunProperties {
    callInTile?: Tile;
    canCallIn?: boolean;
    owner?: Player;
    tile?: Tile;
}

export * from "./bottle";
export * from "./cowboy";
export * from "./furnishing";
export * from "./game-object";
export * from "./player";
export * from "./tile";
export * from "./young-gun";
export * from "./game";
export * from "./game-manager";
export * from "./ai";

import { Bottle, IBottleConstructorArgs } from "./bottle";
import { Cowboy, ICowboyConstructorArgs } from "./cowboy";
import { Furnishing, IFurnishingConstructorArgs } from "./furnishing";
import { GameObject } from "./game-object";
import { Player } from "./player";
import { ITileConstructorArgs, Tile } from "./tile";
import { IYoungGunConstructorArgs, YoungGun } from "./young-gun";

import { AI } from "./ai";
import { SaloonGame } from "./game";
import { SaloonGameManager } from "./game-manager";
import { SaloonGameSettingsManager } from "./game-settings";

export class SaloonGameObjectFactory extends BaseGameObjectFactory {
    public Bottle(data: IBottleConstructorArgs): Bottle {
        return this.createGameObject("Bottle", Bottle, data);
    }
    public Cowboy(data: ICowboyConstructorArgs): Cowboy {
        return this.createGameObject("Cowboy", Cowboy, data);
    }
    public Furnishing(data: IFurnishingConstructorArgs): Furnishing {
        return this.createGameObject("Furnishing", Furnishing, data);
    }
    public Tile(data: ITileConstructorArgs): Tile {
        return this.createGameObject("Tile", Tile, data);
    }
    public YoungGun(data: IYoungGunConstructorArgs): YoungGun {
        return this.createGameObject("YoungGun", YoungGun, data);
    }
}

export const Namespace = makeNamespace({
    AI,
    Game: SaloonGame,
    GameManager: SaloonGameManager,
    GameObjectFactory: SaloonGameObjectFactory,
    GameSettingsManager: SaloonGameSettingsManager,
    Player,

    // these are generated metadata that allow delta-merging values from clients
    // they are never intended to be directly interfaced with outside of
    // Cerveau core developers
    gameSettingsManager: new SaloonGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {
            },
            functions: {
                runTurn: {
                    args: [
                    ],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                bartenderCooldown: {
                    typeName: "int",
                },
                bottles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Bottle,
                    },
                },
                brawlerDamage: {
                    typeName: "int",
                },
                cowboys: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Cowboy,
                    },
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                },
                currentTurn: {
                    typeName: "int",
                },
                furnishings: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Furnishing,
                    },
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: GameObject,
                    },
                },
                jobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxCowboysPerJob: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Player,
                    },
                },
                rowdinessToSiesta: {
                    typeName: "int",
                },
                session: {
                    typeName: "string",
                },
                sharpshooterDamage: {
                    typeName: "int",
                },
                siestaLength: {
                    typeName: "int",
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Tile,
                    },
                },
                turnsDrunk: {
                    typeName: "int",
                },
            },
            functions: {
            },
        },
        Bottle: {
            parentClassName: "GameObject",
            attributes: {
                direction: {
                    typeName: "string",
                },
                drunkDirection: {
                    typeName: "string",
                },
                isDestroyed: {
                    typeName: "boolean",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
            },
            functions: {
            },
        },
        Cowboy: {
            parentClassName: "GameObject",
            attributes: {
                canMove: {
                    typeName: "boolean",
                },
                drunkDirection: {
                    typeName: "string",
                },
                focus: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                isDead: {
                    typeName: "boolean",
                },
                isDrunk: {
                    typeName: "boolean",
                },
                job: {
                    typeName: "string",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
                tolerance: {
                    typeName: "int",
                },
                turnsBusy: {
                    typeName: "int",
                },
            },
            functions: {
                act: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: Tile,
                        },
                        {
                            argName: "drunkDirection",
                            typeName: "string",
                            defaultValue: "",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: Tile,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                play: {
                    args: [
                        {
                            argName: "piano",
                            typeName: "gameObject",
                            gameObjectClass: Furnishing,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Furnishing: {
            parentClassName: "GameObject",
            attributes: {
                health: {
                    typeName: "int",
                },
                isDestroyed: {
                    typeName: "boolean",
                },
                isPiano: {
                    typeName: "boolean",
                },
                isPlaying: {
                    typeName: "boolean",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
            },
            functions: {
            },
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                clientType: {
                    typeName: "string",
                },
                cowboys: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Cowboy,
                    },
                },
                kills: {
                    typeName: "int",
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                rowdiness: {
                    typeName: "int",
                },
                score: {
                    typeName: "int",
                },
                siesta: {
                    typeName: "int",
                },
                timeRemaining: {
                    typeName: "float",
                },
                won: {
                    typeName: "boolean",
                },
                youngGun: {
                    typeName: "gameObject",
                    gameObjectClass: YoungGun,
                },
            },
            functions: {
            },
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                bottle: {
                    typeName: "gameObject",
                    gameObjectClass: Bottle,
                },
                cowboy: {
                    typeName: "gameObject",
                    gameObjectClass: Cowboy,
                },
                furnishing: {
                    typeName: "gameObject",
                    gameObjectClass: Furnishing,
                },
                hasHazard: {
                    typeName: "boolean",
                },
                isBalcony: {
                    typeName: "boolean",
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
                youngGun: {
                    typeName: "gameObject",
                    gameObjectClass: YoungGun,
                },
            },
            functions: {
            },
        },
        YoungGun: {
            parentClassName: "GameObject",
            attributes: {
                callInTile: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
                canCallIn: {
                    typeName: "boolean",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                },
            },
            functions: {
                callIn: {
                    args: [
                        {
                            argName: "job",
                            typeName: "string",
                        },
                    ],
                    invalidValue: undefined,
                    returns: {
                        typeName: "gameObject",
                        gameObjectClass: Cowboy,
                    },
                },
            },
        },
    },
});
