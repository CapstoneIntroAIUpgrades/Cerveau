<!-- This is the ShitVis, simply a hack to display checkers so I know the games are valid. Do not take this code seriously -->
<style>
#gameBoard {padding: 1em; background: #ccc;}
#gameBoard table {margin: 0 auto;}
#stateSlider {width: 100%;}
label[for=stateSlider], #buttonControls {width: 100%; text-align: center; display: block;}
#buttonControls button {padding: 0.25em; font-size: 2em;}
table, th, td {border: 1px solid black;}
td { padding: 0.25em; width: 34px; height: 34px; vertical-align: middle; text-align: center; }
#playerInfo {background: #121212; padding: 0.5em; font-size: 1.5em; line-height: 1.25em}
.legend {background: #fff; color: #777;}
.horizontal-legend {padding-bottom: 1em;}
.vertical-legend {padding-right: 1em;}
.valid {background: #D6AD33;}
.invalid {background: #80681F;}
.owner-0 { color: white; }
.owner-1 { color: red; }
</style>

<div id="visualizer">
	<div id="playerInfo"></div>
	<div id="gameBoard"></div>
	<label for="stateSlider">0</label>
	<input id="stateSlider" type="range" name="stateSlider" min="0" max="1000" />
	<div id="buttonControls">
		<button id="prevButton">&laquo;</button>
		<button id="playButton">&#9658;</button>
		<button id="nextButton">&raquo;</button>
	</div>
</div>

<script type="text/javascript">

var $visualizer = $("#visualizer");
var $gameBoard = $("#gameBoard");
var $playerInfo = $("#playerInfo");
var $stateSlider = $("#stateSlider");
var $stateNumber = $("label[for=stateSlider]");
var $prevButton = $("#prevButton");
var $playButton = $("#playButton");
var $nextButton = $("#nextButton");

var playString = "&#9658;";

function getUrlParameter(parm) {
	var pageUrl = window.location.search.substring(1);
	var urlVars = pageUrl.split('&');
	for (var i = 0; i < urlVars.length; i++) {
		var parmName = urlVars[i].split('=');
		if (parmName[0] == parm) {
			return parmName[1];
		}
	}
}

var filename = getUrlParameter("gamelog");
var gamelog = undefined;
var states = [];
var tableCells = [];

function clone(obj) {
	return $.extend(true, {}, obj);
};

function buildStates() {
	var intialState = {
		gameObjects: gamelog.states[0].gameObjects,
	}
	states.push(mergeDelta(intialState, gamelog.states[0]));

	for(var i = 1; i < gamelog.states.length; i++) {
		states.push(mergeDelta(clone(states[i-1]), gamelog.states[i]));
	}
};

function isObject(obj) {
	return obj !== null && typeof(obj) === "object";
};

function isGameObject(obj) {
	return isObject(obj) && Object.keys(obj).length == 1 && obj.id !== undefined;
}

function mergeDelta(state, delta) {
	var deltaLength = delta["&LEN"];

	if(deltaLength !== undefined) { // then this part in the state is an array
		delete delta["&LEN"]; // we don't want to copy this key/value over to the state, it was just to signify it is an array
		while(state.length > deltaLength) { // pop elements off the array until the array is short enough. an increase in array size will be added below as arrays resize when keys larger are set
			state.pop();
		}
	}

	for(var key in delta) {
		if(delta.hasOwnProperty(key)) {
			if(delta[key] === "&RM") {
				delete state[key];
			}
			else if(isObject(delta[key]) && isObject(state[key])) {
				mergeDelta(state[key], delta[key]);
			}
			else {
				if(isObject(delta[key]) && delta[key]["&LEN"] !== undefined) {
					newArray = [];
					for(var i = 0; i < delta[key]["&LEN"]; i++) {
						newArray.push(delta[key][i]);
					}
					state[key] = newArray;
				}
				else {
					state[key] = delta[key];
				}
				
			}
		}
	}

	return state;
};

var initGameBoard = function(data) {
	var table = $("<table>").appendTo($gameBoard);

	for(var y = 0; y < data.boardHeight + 1; y++) {
		var row = $("<tr>").appendTo(table);
		for(var x = 0; x < data.boardWidth + 1; x++) {
			tableCells[x] = tableCells[x] || [];
			var cell = $("<td>").appendTo(row);

			if(x > 0 && y > 0) {
				tableCells[x-1][y-1] = cell;
			}
			else if(x === 0 && y === 0) {
				cell.addClass("legend").html("&nbsp;");
			}
			else if(x === 0) {
				cell.addClass("vertical-legend legend").html(y-1);
			}
			else if(y == 0) {
				cell.addClass("horizontal-legend legend").html(x-1);
			}

			if(!cell.hasClass("legend")) {
				if((x + y)%2 == 1) {
					cell.addClass("valid");
				}
				else {
					cell.addClass("invalid");
				}
			}
		}
	}
};

function updateBoard(stateNumber) {
	var state = states[stateNumber];
	var locations = [];
	for(var x = 0; x < state.boardWidth; x++) {
		locations[x] = [];
	}

	for(var i = 0; i < state.checkers.length; i++) {
		var checker = state.gameObjects[state.checkers[i].id];
		locations[checker.x][checker.y] = checker;
	}

	for(var x = 0; x < state.boardWidth; x++) {
		for(var y = 0; y < state.boardHeight; y++) {
			var cell = tableCells[x][y];
			var checker = locations[x][y];
			var val = "&nbsp;";
			if(checker) {
				if(checker.kinged) {
					val = "{" + checker.id + "}";
				}
				else {
					val = "(" + checker.id + ")";
				}
				cell.addClass("owner-" + checker.owner.id);
			}
			else {
				cell.removeClass("owner-0 owner-1");
			}

			cell.html(val);
		}
	}

	strs = [];
	for(var i = 0; i < state.players.length; i++) {
		var player = state.gameObjects[state.players[i].id];

		var str = '<span class="owner-' + player.id + '">Player ' + player.name + " (id: " + player.id + ")" + (state.currentPlayer.id === player.id ? " <strong>is current player</strong>" : "");

		if(player.won) {
			str += '<br><strong style="margin-left: 1em">won</strong> because ' + player.winReason + "<br/>";
		}
		if(player.lost) {
			str += '<br><strong style="margin-left: 1em">lost</strong> because ' + player.loseReason + "<br/>";
		}

		strs.push(str + "</span>");
	}

	$playerInfo.html(strs.join("<br/>"));
};

currentStateNum = 0;

function initSlider() {
	$stateSlider
		.on("change mousemove", function() {
			newNum = parseInt($stateSlider.val());
			if(newNum !== currentStateNum) {
				pause();
				currentStateNum = newNum;

				$stateNumber.html(currentStateNum);

				updateBoard(currentStateNum);
			}
		})
		.attr("max", states.length-1)
		.val(currentStateNum)
		.trigger("change");
};

function next(dontPause) {
	if(!dontPause) {
		pause();
	}

	$stateSlider.val(Math.min(currentStateNum + 1, states.length-1)).trigger("change");
};

function prev(dontPause) {
	if(!dontPause) {
		pause();
	}
	
	$stateSlider.val(Math.max(currentStateNum - 1, 0)).trigger("change");
};

var playTimeout = undefined;

function pause() {
	clearTimeout(playTimeout);
	$playButton.html(playString);
};

function play() {
	pause();

	playTimeout = setTimeout(function() {
		next(true);
		if(currentStateNum < states.length-1) {
			play();
		}
		else {
			pause();
		}
	}, 133);

	$playButton.html("||");
};

function initButtons() {
	$playButton.on("click", function() {
		if($playButton.html() == "||") {
			pause();
		}
		else {
			play();
		}
	});

	$prevButton.on("click", function() {
		prev();
	});

	$nextButton.on("click", function() {
		next();
	});
}

function init() {
	initialState = gamelog.states[0];

	buildStates();

	initGameBoard(initialState);
	initSlider();
	initButtons();

	play();
};

$.ajax({url: "gamelogs/" + filename + ".joue",}).done(function(data){
	gamelog = JSON.parse(data);
	init();
});

</script>