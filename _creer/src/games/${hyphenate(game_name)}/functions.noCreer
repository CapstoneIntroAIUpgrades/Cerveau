<%
from textwrap import TextWrapper
import operator

if not 'cerveau' in shared:
    shared['cerveau'] = {}
    shared['cerveau']['TextWrapper'] = TextWrapper

    def cerveau_default(type_obj):
        base_type = type_obj['name']
        if base_type == "string":
            return "''"
        elif base_type == "dictionary":
            return '{}'
        elif base_type == "list":
            return '[]'
        elif base_type == "int" or base_type == "float":
            return '0'
        elif base_type == "boolean":
            return 'false'
        else:
            return "undefined"
    shared['cerveau']['default'] = cerveau_default

    def cerveau_type(type_obj, nullable=None):
        base_type = type_obj['name']

        if base_type == "dictionary":
            return "{[id: " + cerveau_type(type_obj['keyType']) + "]: " + cerveau_type(type_obj['valueType']) + "}"
        elif base_type == "list":
            ret = cerveau_type(type_obj['valueType'], False)
            if ' ' in ret:
                ret = '(' + ret + ')'
            return ret + "[]"
        elif base_type == "int" or base_type == "float":
            return "number"
        elif type_obj['is_game_object']:
            ret = base_type
            if nullable is not None:
                if nullable and type_obj['nullable']:
                    ret += " | undefined"
            return ret
        else: # string, boolean, or GameObject(s)
            return base_type
    shared['cerveau']['type'] = cerveau_type

    def cerveau_schema_type(type_obj, depth=1):
        base_type = type_obj['name']
        string = ''
        typeName = ('    ' * depth) + 'typeName: "{}",'

        if type_obj['is_game_object']:
            typeName = typeName.format('gameObject') + '\n' + (
                ('    ' * depth) + 'gameObjectClass: ' + base_type + ','
            )
        else:
            typeName = typeName.format(base_type)

        string = string + typeName

        if 'keyType' in type_obj and type_obj['keyType']:
                string = string + """
{indent}keyType: {{
{type}
{indent}}},""".format(indent=('    ' * depth), type=cerveau_schema_type(type_obj['keyType'], depth + 1))

        if 'valueType' in type_obj and type_obj['valueType']:
                string = string + """
{indent}valueType: {{
{type}
{indent}}},""".format(indent=('    ' * depth), type=cerveau_schema_type(type_obj['valueType'], depth + 1))

        return string
    shared['cerveau']['schema_type'] = cerveau_schema_type

    def cerveau_value(type_obj, default):
        base_type = type_obj['name']
        if base_type == "string":
            return '"' + default + '"'
        elif base_type == "boolean":
            return str(default).lower()
        elif base_type == "int" or base_type == "float":
            return str(default)
        else:
            return "undefined"
    shared['cerveau']['value'] = cerveau_value

    def cerveau_properties(obj):
        attrs = dict(obj['attributes'], **obj['inheritedAttributes']) # merge the two attributes

        properties = []
        for attr_name in sort_dict_keys(attrs):
            attr = attrs[attr_name]
            properties.append({
                'name': attr_name,
                'type': cerveau_type(attr['type']),
                'description': attr["description"]
            })
        return properties
    shared['cerveau']['properties'] = cerveau_properties

    def cerveau_block_comment(prefix, doc):
        wrapper = TextWrapper(
            initial_indent=prefix+' * ',
            subsequent_indent=prefix+' * ',
            width=80,
        )
        if isinstance(doc, str):
            doc = {'description': doc}

        description = doc['description']
        lines = wrapper.wrap(doc['description'])

        if ('arguments' in doc and doc['arguments']) or 'returns' in doc and doc['returns']:
            lines.append(prefix+' *')

        if 'arguments' in doc and doc['arguments']:
            for arg in doc['arguments']:
                lines += wrapper.wrap('@param ' + arg['name'] + ' - ' + arg['description'])
        if 'returns' in doc and doc['returns']:
            lines += wrapper.wrap('@returns ' + doc['returns']['description'])

        lines.insert(0, prefix+'/**')
        lines.append(prefix+' */')
        return '\n'.join(lines)
    shared['cerveau']['block_comment'] = cerveau_block_comment

    def cerveau_imports(imports):
        pairs = sorted(imports.items(), key=operator.itemgetter(0))
        index = -1
        for i, item in enumerate(pairs):
            if item[0][0] != '.':
                index = i
                break
        if index > -1:
            p = pairs[index:] + pairs[:index]
            pairs = p

        doc = ''
        for pair in pairs:
            names = sorted(pair[1])
            one_line = ('import { '+(', '.join(names))+' } from "'+pair[0]+'";')

            if len(one_line) > 80:
                # wrap it
                names = '\n' + ''.join(['    {},\n'.format(n) for n in names])
            else:
                names = ' ' + ', '.join(names) + ' '

            doc += ('import {'+ names +'} from "'+pair[0]+'";\n')
        return doc
    shared['cerveau']['imports'] = cerveau_imports

    def cerveau_generate_imports(obj_key, obj, imports):
        if imports == None:
            imports = {}
        used_types = []

        def gen_used_types(type_obj):
            deep_obj = False
            for key in ['keyType', 'valueType']:
                if type_obj[key]:
                    gen_used_types(type_obj[key])
                    deep_obj = True
            if not deep_obj:
                used_types.append(type_obj)

        # AI does not have attributes at this time
        if 'attributes' in obj:
            for attr_name, attr_parms in obj['attributes'].items():
                gen_used_types(attr_parms['type'])

        # AI and all game objects share functions
        for function_name, function_parms in obj['functions'].items():
            for arg in function_parms['arguments']:
                gen_used_types(arg['type'])
            if function_parms['returns']:
                gen_used_types(function_parms['returns']['type'])

        for used_type in used_types:
            if used_type['is_game_object']:
                name = used_type['name']
                key = './' + str(hyphenate(name))
                if name != obj_key:
                    if key in imports:
                        if not name in imports[key]:
                            imports[key].append(name)
                        #else:
                    else:
                        imports[key] = [name]
        return imports
    shared['cerveau']['generate_imports'] = cerveau_generate_imports

    def cerveau_formatted_function_top(function_name, obj, promise=True):
        function_parms = dict(obj['functions'][function_name])
        docstring = cerveau_block_comment('    ', function_parms)

        returns = 'void'
        if function_parms['returns']:
            returns = shared['cerveau']['type'](function_parms['returns']['type'])

        formatted_name = '    protected '+('async ' if promise else '')+function_name+'('
        unformatted_args = (
            [(a['name']+': '+shared['cerveau']['type'](a['type'])+(
                (' = '+shared['cerveau']['value'](a['type'], a['default'])) if a['default'] != None else ''
            )) for a in function_parms['arguments']]
        )

        formatted_return = '): '+ ('Promise<{}>' if promise else '{}').format(returns) +' {'
        formatted_args = ', '.join(unformatted_args)

        formatted_function_signature = None
        as_one_line = formatted_name + formatted_args + formatted_return
        if len(as_one_line) < 80:
            formatted_function_signature = as_one_line
        else:
            # it does not all fit on one line, so split up by arg
            formatted_function_signature = "".join([
                formatted_name,
                '\n        ',
                ',\n        '.join(unformatted_args),
                ',\n    ',
                formatted_return
            ])


        return docstring + "\n" + formatted_function_signature
    shared['cerveau']['formatted_function_top'] = cerveau_formatted_function_top
%>