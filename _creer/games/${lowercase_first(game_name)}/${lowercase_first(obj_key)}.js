// ${header}
// Note: this is the file you should modify. The logic generated by Creer should be mostly in ./generated/
<%include file="generated/functions.noCreer" />
var Class = require("../../utilities/class");
var Generated${obj_key} = require("./generated/generated${obj_key}");

${merge("//", "requires", """
// any additional requires you want can be required here safely between cree runs
""")}

// @class ${obj_key}: ${obj['description']}
var ${obj_key} = Class(Generated${obj_key}, {
    /**
     * Initializes ${obj_key}s.
     *
     * @param {Object} a simple mapping passsed in to the constructor with whatever you sent with it.
     */
    init: function(data) {
        Generated${obj_key}.init.apply(this, arguments);

${merge("        //", "init",
"""
        // put any initialization logic here. the base variables should be set from 'data' in Generated${obj_key}'s init function
        // NOTE: no players are connected (nor created) at this point.

"""
)}
    },

% if obj_key == "Game":
    /**
     * This is called when the game begins, once players are connected and ready to play, and game objects have been initialized. Anything in init() may not have the appropriate game objects created yet..
     */
    begin: function() {
        Generated${obj_key}.begin.apply(this, arguments);

${merge("        //", "begin", "        // any logic after init can be put here")}
    },

% endif
% for function_name in obj['function_names']:
<%
    function_parms = obj['functions'][function_name]
    if 'serverPredefined' in function_parms and function_parms['serverPredefined']:
        continue
%>
    /**
     * ${function_parms['description']}
     *
     * @param {Player} player - the player that called this.
% if 'arguments' in function_parms:
% for arg_parms in function_parms['arguments']:
     * @param {${shared['cerveau']['type'](arg_parms['type'])}} ${arg_parms['name']} - ${arg_parms['description']}
% endfor
% endif
     * @param {function} asyncReturn - if you nest orders in this function you must return that value via this function in the order's callback.
% if function_parms['returns']:
     * @returns {${shared['cerveau']['type'](function_parms['returns']['type'])}} ${function_parms['returns']['description']}
% endif
     */
    ${function_name}: function(player${", ".join([""] + function_parms["argument_names"])}, asyncReturn) {
${merge("        // ", function_name, (
"""
        // Developer: Put your game logic for the {0}'s {1} function here
        return {2};

"""
).format(obj_key, function_name, shared['cerveau']['default'](function_parms['returns']['type'])))
}
    },
% endfor

${merge("    //", "added-functions",
"""
    // You can add additional functions here. These functions will not be directly callable by client AIs

"""
)}

});

module.exports = ${obj_key};
