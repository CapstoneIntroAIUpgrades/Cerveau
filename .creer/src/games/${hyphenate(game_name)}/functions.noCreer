<%
from textwrap import TextWrapper, wrap
import operator

MAX_LINE_LENGTH = 79 # one less than 80 to allow for scroll bars in 80 char
                     # width editors

if not 'cerveau' in shared:
    shared['cerveau'] = {}
    shared['cerveau']['TextWrapper'] = TextWrapper

    def cerveau_default(type_obj):
        base_type = type_obj['name']
        if base_type == "string":
            return '""'
        elif base_type == "dictionary":
            return '{}'
        elif base_type == "list":
            return '[]'
        elif base_type == "int" or base_type == "float":
            return '0'
        elif base_type == "boolean":
            return 'false'
        else:
            return "undefined"
    shared['cerveau']['default'] = cerveau_default

    def cerveau_type(type_obj, nullable=None, wrap_literals_indent=False):
        base_type = type_obj['name']

        if 'literals' in type_obj and type_obj['literals']:
            literals = list(type_obj['literals'])
            if base_type == 'string':
                literals = [ '"{}"'.format(lit) for lit in literals ]
            one_line = ' | '.join(literals)
            if wrap_literals_indent == False:
                return one_line
            else:
                indent = '    ' * wrap_literals_indent if type(wrap_literals_indent) == int else ''
                return '\n' + '\n'.join(['{}    | "{}"'.format(indent, l) for l in type_obj['literals']])

        if base_type == "dictionary":
            return "{ [id: " + cerveau_type(type_obj['keyType']) + "]: " + cerveau_type(type_obj['valueType']) + " }"
        elif base_type == "list":
            ret = cerveau_type(type_obj['valueType'], False)
            if ' ' in ret:
                ret = '(' + ret + ')'
            return ret + "[]"
        elif base_type == "int" or base_type == "float":
            return "number"
        elif type_obj['is_game_object']:
            ret = base_type
            if nullable is not None:
                if nullable and type_obj['nullable']:
                    ret += " | undefined"
            return ret
        else: # string, boolean
            return base_type
    shared['cerveau']['type'] = cerveau_type

    def _jsdoc_description(description, start='', indent=0):
        description = description.replace('Null', 'Undefined').replace('null', 'undefined')
        words = description.split(' ')
        indent = indent * '    '
        max_len = 80 - len(indent) - len(' * ')

        lines = []
        line = []
        line_len = len(start)
        while words:
            word = words.pop(0)
            next_len = line_len + len(word) + 1
            if next_len > max_len:
                # need to wrap this word to the next line
                next_line = []
                if word[0].islower() or (line and line[-1][-1] == '.'):
                    # no need to pop, we can move this to the next line right away
                    pass
                else:
                    while line:
                        popped = line.pop()
                        next_line.insert(0, popped)
                        if popped[0].islower() or popped[-1] == '.':
                            break

                    if not line:
                        raise Exception('Could not jsdoc format description: "{}", ran out of lines.'.format(description))
                    # we need to pop off words from this line to pad the next line

                lines.append(line)
                next_line.append(word)
                line = next_line
                line_len = -1
                for word in line:
                    line_len += 1 + len(word)

                if line_len > max_len:
                    raise Exception('Could not jsdoc format description: "{}", next line force to be too long.'.format(description))
            else:
                line_len = next_len
                line.append(word)

        if line:
            lines.append(line)
        if start:
            lines[0].insert(0, start)
        return '\n'.join([(indent + ' * ' + ' '.join(line)) for line in lines])

    def cerveau_schema_type(type_obj, depth=1, optional=False):
        base_type = type_obj['name']
        string = ''
        typeName = ('    ' * depth) + 'typeName: "{}",'

        if type_obj['is_game_object']:
            typeName = typeName.format('gameObject') + '\n' + (
                ('    ' * depth) + 'gameObjectClass: ' + base_type + ','
            ) + '\n' + ('    ' * depth) + 'nullable: ' + ('true' if type_obj['nullable'] else 'false') + ','
        else:
            typeName = typeName.format(base_type)

        string = string + typeName

        literals = type_obj['literals']
        if type_obj['literals']:
            literals = list(literals)
            if not optional:
                string = string + '\n' + ('    ' * depth) + 'defaultValue: {},'.format(
                    '"{}"'.format(literals[0]) if base_type == "string" else literals[0]
                )

            if base_type == 'string':
                literals = [ '"{}"'.format(lit) for lit in literals ]

            string += '\n' + cerveau_wrap_between('literals: [', literals, '],', indent=depth)

        if 'keyType' in type_obj and type_obj['keyType']:
                string = string + """
{indent}keyType: {{
{type}
{indent}}},""".format(indent=('    ' * depth), type=cerveau_schema_type(type_obj['keyType'], depth + 1))

        if 'valueType' in type_obj and type_obj['valueType']:
                string = string + """
{indent}valueType: {{
{type}
{indent}}},""".format(indent=('    ' * depth), type=cerveau_schema_type(type_obj['valueType'], depth + 1))

        return string
    shared['cerveau']['schema_type'] = cerveau_schema_type

    def cerveau_value(type_obj, default):
        base_type = type_obj['name']
        if base_type == "string":
            return '"' + default + '"'
        elif base_type == "boolean":
            return str(default).lower()
        elif base_type == "int" or base_type == "float":
            return str(default)
        else:
            return "undefined"
    shared['cerveau']['value'] = cerveau_value

    def cerveau_properties(obj):
        attrs = dict(obj['attributes'], **obj['inheritedAttributes']) # merge the two attributes

        properties = []
        for attr_name in sort_dict_keys(attrs):
            attr = attrs[attr_name]
            properties.append({
                'name': attr_name,
                'type': cerveau_type(attr['type']),
                'description': attr["description"]
            })
        return properties
    shared['cerveau']['properties'] = cerveau_properties

    def cerveau_block_comment(doc, indent=0):
        if isinstance(doc, str):
            doc = {'description': doc}

        indent_str = ('    ' * indent)
        jsdoc = indent_str + '/**\n' + _jsdoc_description(doc['description'], indent=indent) + '\n'

        if ('arguments' in doc and doc['arguments']) or 'returns' in doc and doc['returns']:
            jsdoc += indent_str + ' *\n'

        if 'arguments' in doc and doc['arguments']:
            for arg in doc['arguments']:
                jsdoc += _jsdoc_description(arg['description'], start='@param {} -'.format(arg['name']), indent=indent) + '\n'
        if 'returns' in doc and doc['returns']:
            jsdoc += _jsdoc_description(doc['returns']['description'], start='@returns', indent=indent) + '\n'

        jsdoc += indent_str + ' */'
        return jsdoc
    shared['cerveau']['block_comment'] = cerveau_block_comment

    def cerveau_imports(imports):
        pairs = sorted(imports.items(), key=operator.itemgetter(0))
        index = -1
        for i, item in enumerate(pairs):
            if item[0][0] != '.':
                index = i
                break
        if index > -1:
            p = pairs[index:] + pairs[:index]
            pairs = p

        doc = ''
        for pair in pairs:
            names = sorted(pair[1])
            one_line = ('import { '+(', '.join(names))+' } from "'+pair[0]+'";')

            if len(one_line) <= 79:
                doc += one_line
            else:
                doc += 'import {\n'
                doc += '\n'.join(['    {},'.format(n) for n in names ])
                doc +=  '\n}' + ' from "{}";'.format(pair[0])

            doc += '\n'
        return doc
    shared['cerveau']['imports'] = cerveau_imports

    def cerveau_generate_imports(obj_key, obj, imports):
        if imports == None:
            imports = {}
        used_types = []

        def gen_used_types(type_obj):
            deep_obj = False
            for key in ['keyType', 'valueType']:
                if type_obj[key]:
                    gen_used_types(type_obj[key])
                    deep_obj = True
            if not deep_obj:
                used_types.append(type_obj)

        # AI does not have attributes at this time
        if 'attributes' in obj:
            for attr_name, attr_parms in obj['attributes'].items():
                gen_used_types(attr_parms['type'])

        # AI and all game objects share functions
        for function_name, function_parms in obj['functions'].items():
            for arg in function_parms['arguments']:
                gen_used_types(arg['type'])
            if function_parms['returns']:
                gen_used_types(function_parms['returns']['type'])

        for used_type in used_types:
            if used_type['is_game_object']:
                name = used_type['name']
                key = './' + str(hyphenate(name))
                if name != obj_key:
                    if key in imports:
                        if not name in imports[key]:
                            imports[key].append(name)
                        #else:
                    else:
                        imports[key] = [name]
        return imports
    shared['cerveau']['generate_imports'] = cerveau_generate_imports

    def cerveau_formatted_function_top(function_name, obj, scope='protected', promise=True):
        function_parms = dict(obj['functions'][function_name])
        docstring = cerveau_block_comment(function_parms, indent=1)

        returns = 'void'
        if function_parms['returns']:
            returns = shared['cerveau']['type'](function_parms['returns']['type'], nullable=True)

        formatted_name = '    {} '.format(scope)+('async ' if promise else '')+function_name+'('
        def arg_format(a):
            s = a['name']
            if a['default'] != None and a['type']['literals'] == None:
                s += ' = ' + shared['cerveau']['value'](a['type'], a['default'])
            else:
                s += ': ' + shared['cerveau']['type'](a['type'], nullable=True)
            return s
        unformatted_args = [arg_format(a) for a in function_parms['arguments']]

        formatted_return = '): '+ ('Promise<{}>' if promise else '{}').format(returns) +' {'
        formatted_args = ', '.join(unformatted_args)

        formatted_function_signature = None
        as_one_line = formatted_name + formatted_args + formatted_return
        if len(as_one_line) < 80:
            formatted_function_signature = as_one_line
        else:
            # it does not all fit on one line, so split up by arg
            formatted_function_signature = "".join([
                formatted_name,
                '\n        ',
                ',\n        '.join(unformatted_args),
                ',\n    ',
                formatted_return
            ])


        return docstring + "\n" + formatted_function_signature
    shared['cerveau']['formatted_function_top'] = cerveau_formatted_function_top

    def cerveau_wrap_string(string, length, pre_lines):
        wrapped = wrap(string, length)
        quote_wrapped = [ '{}"{}"'.format(
            pre_lines if i > 0 else '',
            (w + " ") if i < (len(wrapped) - 1) else w) for i, w in enumerate(wrapped) ]
        return '\n'.join(quote_wrapped)
    shared['cerveau']['wrap_string'] = cerveau_wrap_string

    def cerveau_wrap_between(prefix, inner, suffix, indent=0, one_line_joiner=', ', multiline_format='    {},'):
        indent = '    ' * indent
        inner_str = inner
        if type(inner) != str:
            inner_str = one_line_joiner.join(inner)
        one_line = indent + prefix + inner_str + suffix;
        if len(one_line) <= 80:
            return one_line

        if type(inner) != str:
            inner_str = '\n'.join([indent + multiline_format.format(l) for l in inner])
        else:
            inner_str = indent + '    ' + inner

        return indent + prefix + '\n' + inner_str + '\n' + indent + suffix
    shared['cerveau']['wrap_between'] = cerveau_wrap_between
%>