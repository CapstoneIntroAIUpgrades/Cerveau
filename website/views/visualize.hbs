<!-- This is the ShitVis, simply a hack to display checkers so I know the games are valid. Do not take this code seriously -->
<style>
#gameBoard {padding: 1em; background: #ccc;}
#gameBoard table {margin: 0 auto;}
#stateSlider {width: 100%;}
label[for=stateSlider], #buttonControls {width: 100%; text-align: center; display: block;}
#buttonControls button {padding: 0.25em; font-size: 2em;}
table, th, td {border: 1px solid black;}
td { padding: 0.25em; width: 34px; height: 34px; vertical-align: middle; text-align: center; }
#playerInfo {background: #121212; padding: 0.5em; font-size: 1.5em; line-height: 1.25em}
#deltaInfo {background: #363036; padding: 0.5em; font-size: 0.75em; line-height: 1.25em; color: #eaefea; font-family: monospace;}
#selectedCell {background: #ededdd; padding: 0.5em;}
.legend {background: #fff; color: #777;}
.horizontal-legend {padding-bottom: 1em;}
.vertical-legend {padding-right: 1em;}
.gameCell {cursor: pointer;}
.selected {box-shadow: inset 0px 0px 0px 3px #000;}
.valid {background: #D6AD33;}
.invalid {background: #80681F;}
.owner-0 { color: green; }
.owner-1 { color: blue; }
</style>

<div id="visualizer">
	<div id="playerInfo"></div>
	<div id="deltaInfo"></div>
	<div id="gameBoard"></div>
	<label for="stateSlider">0</label>
	<input id="stateSlider" type="range" name="stateSlider" min="0" max="1000" />
	<div id="buttonControls">
		<button id="prevButton">&laquo;</button>
		<button id="playButton">&#9658;</button>
		<button id="nextButton">&raquo;</button>
	</div>
	<pre id="selectedCell">
	</pre>
</div>

<script type="text/javascript">

var $visualizer = $("#visualizer");
var $gameBoard = $("#gameBoard");
var $playerInfo = $("#playerInfo");
var $deltaInfo = $("#deltaInfo");
var $stateSlider = $("#stateSlider");
var $stateNumber = $("label[for=stateSlider]");
var $prevButton = $("#prevButton");
var $playButton = $("#playButton");
var $nextButton = $("#nextButton");
var $selectedCell = $("#selectedCell");

var playString = "&#9658;";

var gamelog = undefined;
var initialState = undefined;
var states = [];
var table = $("<table>").appendTo($gameBoard);
var tableCells = [];
var selectedCell = null;

function clone(obj) {
	return $.extend(true, {}, obj);
};

function timeoutDelta(i) {
	var delta = gamelog.deltas[i];
	states.push({
		type: delta.type,
		data: delta.data,
		game: mergeDelta(clone(states[i-1].game), gamelog.deltas[i].game)
	});

	$deltaInfo.html("Parsing Deltas... (" + i + "/" + gamelog.deltas.length + ")");

	if(i < gamelog.deltas.length) {
		setTimeout(function() {
			timeoutDelta(i+1);
		}, 0);
	}
};

function buildStates() {
	var gameObjectState = {
		game: { gameObjects: initialState.gameObjects }
	}
	states.push(mergeDelta(gameObjectState, gamelog.deltas[0])); // ensures there is a previous state (the intial one) for following loop which merges deltas

	timeoutDelta(1);
};

function isObject(obj) {
	return obj !== null && typeof(obj) === "object";
};

function isGameObject(obj) {
	return isObject(obj) && Object.keys(obj).length == 1 && obj.id !== undefined;
};

function mergeDelta(state, delta) {
	var deltaLength = delta["&LEN"];

	if(deltaLength !== undefined) { // then this part in the state is an array
		delete delta["&LEN"]; // we don't want to copy this key/value over to the state, it was just to signify it is an array
		while(state.length > deltaLength) { // pop elements off the array until the array is short enough. an increase in array size will be added below as arrays resize when keys larger are set
			state.pop();
		}
	}

	for(var key in delta) {
		if(delta.hasOwnProperty(key)) {
			if(delta[key] === "&RM") {
				delete state[key];
			}
			else if(isObject(delta[key]) && isObject(state[key])) {
				mergeDelta(state[key], delta[key]);
			}
			else {
				if(isObject(delta[key]) && delta[key]["&LEN"] !== undefined) {
					newArray = [];
					for(var i = 0; i < delta[key]["&LEN"]; i++) {
						newArray.push(delta[key][i]);
					}
					state[key] = newArray;
				}
				else {
					state[key] = delta[key];
				}
				
			}
		}
	}

	return state;
};

var selectCell = function(cell, dontPause) {
	if(!dontPause) {
		pause();
	}

	if(selectedCell) {
		selectedCell.removeClass("selected");
	}

	if(cell && selectedCell !== cell) {
		cell.addClass("selected");
		selectedCell = cell;

		var str = "";
		if(selectedCell._jsonifyThis) {
			str = JSON.stringify(selectedCell._jsonifyThis, undefined, 4);
		}
		$selectedCell.html(str);
	}
	else {
		selectedCell = null;
		$selectedCell.html("");
	}
};

var makeTable = function(width, height) {
	for(var y = -1; y < height; y++) {
		var row = $("<tr>").appendTo(table);
		for(var x = -1; x < width; x++) {
			tableCells[x] = tableCells[x] || [];
			var cell = $("<td>").appendTo(row);

			if(x >= 0 && y >= 0) {
				tableCells[x][y] = cell;
				cell.addClass("gameCell");
				(function(cell) {
					cell.on("click", function() {
						selectCell(cell);
					});
				})(cell);
			}
			else if(x === -1 && y === -1) {
				cell.addClass("legend").html("&nbsp;");
			}
			else if(x === -1) {
				cell.addClass("vertical-legend legend").html(y);
			}
			else if(y == -1) {
				cell.addClass("horizontal-legend legend").html(x);
			}
		}
	}
};

gameBoard = {};

var initBoard = function(data) {
	if(gameBoard.init) {
		gameBoard.init(data);
	}
};

function updateBoard(gameNumber) {
	var state = states[gameNumber];
	var game = state.game;

	if(gameBoard.update) {
		gameBoard.update(game, state);
	}

	// update player info

	strs = [];
	for(var i = 0; i < game.players.length; i++) {
		var player = game.gameObjects[game.players[i].id];

		var str = '<span class="owner-' + player.id + '">Player ' + player.name + " (id: " + player.id + ")" + (game.currentPlayer.id === player.id ? " <strong>is current player</strong>" : "");

		if(player.won) {
			str += '<br><strong style="margin-left: 1em">won</strong> because ' + player.reasonWon + "<br/>";
		}
		if(player.lost) {
			str += '<br><strong style="margin-left: 1em">lost</strong> because ' + player.reasonLost + "<br/>";
		}

		strs.push(str + "</span>");
	}

	$playerInfo.html(strs.join("<br/>"));


	// update delta info

	str = "Delta: ";
	if(state.type) {
		str += state.type + " = ";
	}

	if(state.data) {
		str += JSON.stringify(state.data);
	}

	$deltaInfo.html(str);
};

currentStateNum = 0;

function initSlider() {
	$stateSlider
		.on("change mousemove", function() {
			newNum = parseInt($stateSlider.val());
			if(newNum !== currentStateNum) {
				pause();
				currentStateNum = newNum;

				$stateNumber.html(currentStateNum);

				updateBoard(currentStateNum);
			}
		})
		.attr("max", states.length-1)
		.val(currentStateNum)
		.trigger("change");
};

function next(dontPause) {
	if(!dontPause) {
		pause();
	}

	$stateSlider.val(Math.min(currentStateNum + 1, states.length-1)).trigger("change");
};

function prev(dontPause) {
	if(!dontPause) {
		pause();
	}
	
	$stateSlider.val(Math.max(currentStateNum - 1, 0)).trigger("change");
};

var playTimeout = undefined;

function pause() {
	clearTimeout(playTimeout);
	$playButton.html(playString);
};

function play() {
	pause();

	playTimeout = setTimeout(function() {
		next(true);
		if(currentStateNum < states.length-1) {
			play();
		}
		else {
			pause();
		}
	}, 133);

	selectCell(null, true);
	$playButton.html("||");
};

function initButtons() {
	$playButton.on("click", function() {
		if($playButton.html() == "||") {
			pause();
		}
		else {
			play();
		}
	});

	$prevButton.on("click", function() {
		prev();
	});

	$nextButton.on("click", function() {
		next();
	});
}

function init() {
	initialState = gamelog.deltas[0].game;

	buildStates();

	initBoard(initialState);
	initSlider();
	initButtons();

	play();
};


/////////////////////
// Get the gamelog //
/////////////////////

var gameName = "{{gameName}}";
var gameSession = "{{gameSession}}";
var requestedEpoch = {{requestedEpoch}} || undefined;

$.ajax({url: "/gamelog/" + gameName + "/" + gameSession + "/" + requestedEpoch}).done(function(data){
	if(!data.error) {
		gamelog = data;
		init();
	}
	else {
		alert("ERROR: " + data.error);
	}
});

switch(gameName) {
	case "Checkers":
		gameBoard.init = function(data) {
			makeTable(data.boardWidth, data.boardHeight);

			for(var y = 0; y < data.boardHeight; y++) {
				for(var x = 0; x < data.boardWidth; x++) {
					var cell = tableCells[x][y];

					if(!cell.hasClass("legend")) {
						if((x + y)%2 == 1) {
							cell.addClass("valid");
						}
						else {
							cell.addClass("invalid");
						}
					}
				}
			}
		};

		gameBoard.update = function(game, state) {
			var locations = [];
			for(var x = 0; x < game.boardWidth; x++) {
				locations[x] = [];
			}

			for(var i = 0; i < game.checkers.length; i++) {
				var checker = game.gameObjects[game.checkers[i].id];
				locations[checker.x][checker.y] = checker;
			}

			for(var x = 0; x < game.boardWidth; x++) {
				for(var y = 0; y < game.boardHeight; y++) {
					var cell = tableCells[x][y];
					var checker = locations[x][y];
					var val = "&nbsp;";
					if(checker) {
						if(checker.kinged) {
							val = "{" + checker.id + "}";
						}
						else {
							val = "(" + checker.id + ")";
						}
						cell.addClass("owner-" + checker.owner.id);
					}
					else {
						cell.removeClass("owner-0 owner-1");
					}

					cell.html(val);
					cell._jsonifyThis = checker;
				}
			}
		};
		break;
	case "Anarchy":
		$("#main").css("max-width", "1400px");
		gameBoard.init = function(data) {
			makeTable(data.mapWidth, data.mapHeight);
		};

		gameBoard.update = function(game, state) {
			for(var i = 0; i < game.buildings.length; i++) {
				var building = game.gameObjects[game.buildings[i].id];
				if(building) {
					var name = building.gameObjectName;
					if(name == "Warehouse") {
						name = "A";
					}

					var gb = Math.round(255 - (building.fire / 20)*255);

					cell = tableCells[building.x][building.y];
					cell
						.html(name[0])
						.addClass("owner-" + building.owner.id)
						.css("background-color", "rgb(255, " + gb + ", " + gb + ")")
						._jsonifyThis = building;
				}
			}
		};

		break;
	default:
		window.alert("Game '" + gameName + "' does not have ShitVis support");
}



</script>